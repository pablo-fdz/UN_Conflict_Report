{
    "VectorRetriever": {
        "enabled": false,
        "return_properties": [
            "text"
        ],
        "search_params": {
            "top_k": 20
        }
    },
    "VectorCypherRetriever": {
        "enabled": false,
        "retrieval_query": "//1) Go out 2-3 hops in the entity graph and get relationships\nWITH node AS chunk\nMATCH (chunk)<-[:FROM_CHUNK]-()-[relList:!FROM_CHUNK]-{1,2}()\nUNWIND relList AS rel\n\n//2) collect relationships and text chunks\nWITH collect(DISTINCT chunk) AS chunks,\n collect(DISTINCT rel) AS rels\n\n//3) format and return context\nRETURN '=== text ===\\n' + apoc.text.join([c in chunks | c.text], '\\n---\\n') + '\\n\\n=== kg_rels ===\\n' +\n apoc.text.join([r in rels | startNode(r).name + ' - ' + type(r) + '(' + coalesce(r.details, '') + ')' +  ' -> ' + endNode(r).name ], '\\n---\\n') AS info",
        "search_params": {
            "top_k": 20
        }
    },
    "HybridRetriever": {
        "enabled": false,
        "return_properties": [
            "text"
        ],
        "search_params": {
            "top_k": 20,
            "ranker": "linear",
            "alpha": 0.5
        }
    },
    "HybridCypherRetriever": {
        "enabled": true,
        "retrieval_query": "// 1) Go out 2-3 hops in the entity graph and get relationships\nWITH node AS chunk\nMATCH (chunk)<-[:FROM_CHUNK]-()-[relList:!FROM_CHUNK]-{1,2}()\nUNWIND relList AS rel\n\n// 2) Collect chunks and KG relationships\nWITH collect(DISTINCT chunk) AS chunks,\n     collect(DISTINCT rel) AS kg_rels\n\n// 3) Also pull in each chunkâ€™s Document (optional match to avoid dropping the chunk if it has no FROM_DOCUMENT edge)\nUNWIND chunks AS c\nOPTIONAL MATCH (c)-[:FROM_DOCUMENT]->(doc:Document)\nWITH chunks, kg_rels,\n     collect(DISTINCT {domain:doc.domain, url:doc.url, date:doc.date}) AS docs\n\n// 4) Return formatted output\nRETURN\n  '=== text chunks ===\\n'\n  + apoc.text.join([c IN chunks | c.text], '\\n---\\n')\n  + '\\n\\n=== text chunk document metadata ===\\n'\n  + apoc.text.join([d IN docs |\n       d.domain + ' (domain): ' + d.url + ' (URL), ' + d.date + '(date)'\n    ], '\\n---\\n')\n  + '\\n\\n=== kg_rels ===\\n'\n  + apoc.text.join([r IN kg_rels |\n       startNode(r).name\n       + ' - ' + type(r)\n       + '(' + coalesce(r.details,'') + ')'\n       + ' -> ' + endNode(r).name\n    ], '\\n---\\n')\n  AS info",
        "search_params": {
                "top_k": 20,
                "ranker": "linear",
                "alpha": 0.5
        }
    },
    "Text2CypherRetriever": {
        "enabled": false,
        "llm_config":{
            "model_name": "gemini-2.5-flash-lite-preview-06-17",
            "model_params": {
                "temperature": 0.0
            }
        },
        "examples_config": {
            "include_examples": true,
            "examples": [
                "USER INPUT: 'What events happened in Sudan?'\nQUERY: MATCH (e:Event)-[:HAPPENED_IN]->(c:Country) WHERE c.name = 'Sudan' RETURN e.name, e.type",
                "USER INPUT: 'Which actors participated in attacks?'\nQUERY: MATCH (a:Actor)-[:PARTICIPATED_IN]->(e:Event) WHERE e.type = 'Attack' RETURN a.name, a.type"
            ]
        }
    }
}